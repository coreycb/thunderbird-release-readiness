#!/usr/bin/env python3

import argparse
import cloudscraper
import json
import os
import re
import requests
import string
import subprocess
import sys
import tempfile

from datetime import datetime, timedelta
from functools import lru_cache

import pandas as pd

from tabulate import tabulate


# bugzilla.mozilla.org
BMO_QUERY_TYPES = [
    "regression-all",
    "regression-severe",
    "non-regression-all",
    "non-regression-severe",
    "topcrash",
    "perf",
    "sec-crit-high",
    "sec-moderate-low",
]

# stats.thunderbird.net
STN_QUERY_TYPES = [
    "daily-adi",
    "beta-adi",
    "release-adi",
    "total-adi",
]

# crash-stats.mozilla.org
CSMO_QUERY_TYPES = [
    "release-crashes",
    "beta-crashes",
    "daily-crashes",
]

INCLUDE_PREVIOUS_DAILY = False
INCLUDE_PREVIOUS_BETA = False
INCLUDE_PREVIOUS_RELEASE = False

scraper = cloudscraper.create_scraper()

@lru_cache
def current_thunderbird_versions():
    url = "https://product-details.mozilla.org/1.0/thunderbird_versions.json"
    response = scraper.get(url)
    data = response.json()
    return data


@lru_cache
def thunderbird_status_versions():
    thunderbird_versions = current_thunderbird_versions()
    status_version_start = thunderbird_versions["THUNDERBIRD_ESR"].split(".")[0]
    status_version_end = thunderbird_versions[
        "LATEST_THUNDERBIRD_NIGHTLY_VERSION"
    ].split(".")[0]
    thunderbird_status_versions = [
        f"cf_status_thunderbird_esr{status_version_start}"
    ] + [
        f"cf_status_thunderbird_{index}"
        for index in range(int(status_version_start), int(status_version_end) + 1)
    ]
    return thunderbird_status_versions


@lru_cache
def thunderbird_daily_versions():
    thunderbird_versions = current_thunderbird_versions()
    daily = thunderbird_versions["LATEST_THUNDERBIRD_NIGHTLY_VERSION"]
    thunderbird_daily_versions = [daily]
    if INCLUDE_PREVIOUS_DAILY:
        previous_daily = f"{int(daily.split('.')[0]) - 1}.0a1"
        thunderbird_daily_versions = thunderbird_daily_versions + [f"{previous_daily}"]
    return thunderbird_daily_versions


@lru_cache
def thunderbird_beta_versions():
    thunderbird_versions = current_thunderbird_versions()
    beta = thunderbird_versions["LATEST_THUNDERBIRD_DEVEL_VERSION"].split(".")[0]
    thunderbird_beta_versions = [f"{beta}.0b{index}" for index in range(1, 7)]
    if INCLUDE_PREVIOUS_BETA:
        previous_beta = f"{int(beta.split('.')[0]) - 1}"
        thunderbird_beta_versions = thunderbird_beta_versions + [
            f"{previous_beta}.0b{index}" for index in range(1, 7)
        ]
    return thunderbird_beta_versions


@lru_cache
def thunderbird_release_versions():
    thunderbird_versions = current_thunderbird_versions()
    release = thunderbird_versions["LATEST_THUNDERBIRD_VERSION"].split(".")[0]
    thunderbird_release_versions = [f"{release}.0"] + [
        f"{release}.0.{index}" for index in range(1, 4)
    ]
    if INCLUDE_PREVIOUS_RELEASE:
        previous_release = f"{int(release) - 1}"
        thunderbird_release_versions = thunderbird_release_versions + [f"{previous_release}.0"] + [
            f"{previous_release}.0.{index}" for index in range(1, 4)
        ]
    return thunderbird_release_versions


@lru_cache
def today():
    """Get today's date in YYYY-MM-DD format"""
    today = datetime.now()
    return today.strftime("%Y-%m-%d")


@lru_cache
def yesterday():
    """Get yesterday's date in YYYY-MM-DD format"""
    today = datetime.now()
    yesterday = today - timedelta(days=1)
    return yesterday.strftime("%Y-%m-%d")


def bmo_url(query_type, rest_url=True):
    """Get bugzilla.mozilla.org URL"""
    index = 4
    f_version = ""
    o_comparison = ""
    v_status = ""
    for version in thunderbird_status_versions():
        f_version = f"{f_version}f{index}={version}&"
        o_comparison = f"{o_comparison}o{index}=equals&"
        v_status = f"{v_status}v{index}=affected&"
        index += 1
    f_version = f"{f_version}f{index}=CP&"

    if rest_url:
        url_base = (
            "https://bugzilla.mozilla.org/rest/bug?include_fields=id,summary,status&"
        )
    else:
        url_base = "https://bugzilla.mozilla.org/buglist.cgi?"

    url = (
        f"{url_base}"
        "bug_type=defect&"
        "chfield=%5BBug%20creation%5D&"
        "f1=short_desc&"
        "f2=component&"
        "f3=OP&"
        f"{f_version}"
        "j3=OR&"
        f"{o_comparison}"
        "resolution=---&"
        "v1=intermit%20perma%20assert%20debug%20ews&"
        "v2=%20add-on%20build%20upstream&"
        f"{v_status}"
    )

    match query_type:
        case "sec-crit-high":
            url = (
                f"{url}"
                "keywords=sec-crit%20sec-high&"
                "keywords_type=anywords&"
                "o1=nowordssubstr&"
                "o2=nowordssubstr&"
            )
        case "sec-moderate-low":
            url = (
                f"{url}"
                "keywords=sec-moderate%20sec-low&"
                "keywords_type=anywords&"
                "o1=nowordssubstr&"
                "o2=nowordssubstr&"
            )
        case "regression-all":
            url = f"{url}" "keywords=regression&" "keywords_type=allwords&"
        case "regression-severe":
            url = (
                f"{url}"
                "keywords=regression&"
                "keywords_type=allwords&"
                "bug_severity=S1&"
                "bug_severity=critical&"
                "bug_severity=S2&"
                "bug_severity=major&"
                "o1=nowordssubstr&"
                "o2=nowordssubstr&"
            )
        case "non-regression-all":
            url = (
                f"{url}"
                "keywords=regression&"
                "keywords_type=nowords&"
                "o1=nowordssubstr&"
                "o2=nowordssubstr&"
            )
        case "non-regression-severe":
            url = (
                f"{url}"
                "keywords=regression&"
                "keywords_type=nowords&"
                "bug_severity=S1&"
                "bug_severity=critical&"
                "bug_severity=S2&"
                "bug_severity=major&"
                "o1=nowordssubstr&"
                "o2=nowordssubstr&"
            )
        case "perf":
            url = (
                f"{url}"
                "keywords=perf&"
                "keywords_type=allwords&"
                "o1=nowordssubstr&"
                "o2=nowordssubstr&"
            )
        case "topcrash":
            url = (
                f"{url}"
                "keywords=topcrash-thunderbird&"
                "keywords_type=allwords&"
                "o1=nowordssubstr&"
                "o2=nowordssubstr&"
            )
        case _:
            sys.exit(f"Unknown query type: {query_type}")

    return url


def csmo_url(query_type, rest_url=True):
    """Get crash-stats.mozilla.org URL"""
    versions = ""
    match query_type:
        case "daily-crashes":
            for version in thunderbird_daily_versions():
                versions = f"{versions}version={version}&"
        case "beta-crashes":
            for version in thunderbird_beta_versions():
                versions = f"{versions}version={version}&"
        case "release-crashes":
            for version in thunderbird_release_versions():
                versions = f"{versions}version={version}&"

    today_formatted = today()
    yesterday_formatted = yesterday()
    start_date = f"date=>={yesterday_formatted}T00:00:00.000Z&"
    end_date = f"date=<{today_formatted}T00:00:00.000Z&"

    if rest_url:
        url_base = (
            "https://crash-stats.mozilla.org/api/SuperSearch/?product=Thunderbird&"
        )
    else:
        url_base = "https://crash-stats.mozilla.org/search/?product=Thunderbird&"

    url = f"{url_base}" f"{versions}" f"{start_date}" f"{end_date}" "_facets=platform&"

    if rest_url:
        url = f"{url}" "_facets=release_channel"
    else:
        url = (
            f"{url}"
            "_facets=release_channel&"
            "_sort=-date&"
            "_columns=date&"
            "_columns=signature&"
            "_columns=product&"
            "_columns=version&"
            "_columns=build_id&"
            "_columns=platform#facet-release_channel"
        )
    return url


def bmo_query(query_type):
    """Query bugzilla.mozilla.org"""
    api_key = os.getenv("BMO_API_KEY")
    if not api_key:
        sys.exit("BMO_API_KEY is empty. Please export your BMO key.")
    headers = {"Content-type": "application/json"}
    params = {"api_key": api_key}

    r = scraper.get(bmo_url(query_type), headers=headers, params=params)
    count = len(json.loads(r.text)["bugs"])
    return count


def stn_query(query_type):
    """Query stats.thunderbird.net"""
    r = scraper.get("https://stats.thunderbird.net/thunderbird_adi.json")
    match query_type:
        case "total-adi":
            count = json.loads(r.text)[yesterday()]["count"]
        case "daily-adi":
            count = 0
            for version in thunderbird_daily_versions():
                if version in json.loads(r.text)[yesterday()]["versions"]:
                    count += json.loads(r.text)[yesterday()]["versions"][version]
        case "beta-adi":
            count = 0
            for version in thunderbird_beta_versions():
                if "0b1" not in version:
                    continue
                version = thunderbird_beta_versions()[0].split("b")[0]
                if version in json.loads(r.text)[yesterday()]["versions"]:
                    count += json.loads(r.text)[yesterday()]["versions"][version]
        case "release-adi":
            count = 0
            for version in thunderbird_release_versions():
                if version in json.loads(r.text)[yesterday()]["versions"]:
                    count += json.loads(r.text)[yesterday()]["versions"][version]
        case _:
            sys.exit(f"Unknown query type: {query_type}")
    return count


def csmo_query(query_type):
    """Query crash-stats.mozilla.org"""
    r = scraper.get(csmo_url(query_type))
    count = json.loads(r.text)["total"]
    return count


def print_versions():
    affected_versions = re.sub(
        "cf_status_thunderbird_", "", ", ".join(thunderbird_status_versions())
    )
    daily_versions = f"{', '.join(thunderbird_daily_versions())}"
    beta_versions = f"{', '.join(thunderbird_beta_versions())}"
    release_versions = f"{', '.join(thunderbird_release_versions())}"
    table_data = {
        "Category": [
            "bugzilla affected versions",
            "daily versions",
            "beta versions",
            "release versions",
        ],
        "Variable": [
            affected_versions,
            daily_versions,
            beta_versions,
            release_versions,
        ],
    }
    df = pd.DataFrame(table_data)
    table_data = df.values.tolist()
    print(tabulate(table_data, tablefmt="plain", colalign=("left", "left")))


def export_metrics_to_spreadsheet(release_readiness_metrics):
    with tempfile.NamedTemporaryFile(suffix=".xlsx", delete=False) as temp_file:
        metrics_df = pd.DataFrame(
            [list(metrics["count"] for metrics in release_readiness_metrics.values())],
            columns=list(release_readiness_metrics.keys()),
        )
        metrics_df.insert(0, "Date", [today()])
        url_df = pd.DataFrame(
            [
                (metrics["text"], metrics["url"])
                for key, metrics in release_readiness_metrics.items()
                if "url" in metrics
            ],
            columns=["Description", "URL"],
        )
        with pd.ExcelWriter(temp_file.name, engine="xlsxwriter") as writer:

            workbook = writer.book

            # formatting for sheet 1
            font = "Arial"
            font_size = 10
            header_format = workbook.add_format(
                {"bg_color": "#B0B3B2", "align": "center"}
            )
            header_format.set_font_name(font)
            header_format.set_font_size(font_size)
            link_format = workbook.add_format({"font_color": "#0000FF", "underline": 1})
            link_format.set_font_name(font)
            link_format.set_font_size(font_size)
            column_width = 50

            # write sheet 1
            sheet1 = workbook.add_worksheet("Release Metrics Charts")
            sheet1.write(0, 0, "Query URLs", header_format)
            for row_num, (
                description,
                url,
            ) in enumerate(url_df.itertuples(index=False), start=1):
                sheet1.write_url(row_num, 0, url, link_format, description)
            sheet1.set_column(0, 0, column_width)

            # formatting for sheet 2
            font = "Helvetica Neue"
            header_format = workbook.add_format(
                {"bg_color": "#B0B3B2", "align": "center"}
            )
            header_format.set_font_name(font)
            header_format.set_font_size(font_size)
            header_format.set_text_wrap()
            date_format = workbook.add_format(
                {"bg_color": "#D4D4D4", "align": "center"}
            )
            date_format.set_font_name(font)
            date_format.set_font_size(font_size)
            percentage_format = workbook.add_format(
                {"num_format": "0.00%", "align": "center"}
            )
            percentage_format.set_font_name(font)
            percentage_format.set_font_size(font_size)
            other_format = workbook.add_format({"align": "center"})
            other_format.set_font_name(font)
            other_format.set_font_size(font_size)

            percentage_columns = ["L", "O", "R", "T", "U", "V"]
            other_columns = list(
                filter(
                    lambda x: x not in percentage_columns, list(string.ascii_uppercase)
                )
            )
            last_other_column = "S"
            column_width = 12

            # write sheet 2
            metrics_df.to_excel(writer, index=False, sheet_name="Data from Queries")
            sheet2 = writer.sheets["Data from Queries"]
            for col_num, col_name in enumerate(metrics_df.columns):
                sheet2.write(0, col_num, col_name, header_format)
                sheet2.set_column(col_num, col_num, column_width, header_format)
            for column in percentage_columns:
                sheet2.set_column(f"{column}:{column}", column_width, percentage_format)
            for column in other_columns[
                other_columns.index("A") : other_columns.index("A") + 1
            ]:
                sheet2.set_column(f"{column}:{column}", column_width, date_format)
            for column in other_columns[
                other_columns.index("B") : other_columns.index(last_other_column) + 1
            ]:
                sheet2.set_column(f"{column}:{column}", column_width, other_format)

        try:
            subprocess.run(["xdg-open", temp_file.name], check=True)
        except Exception as e:
            print(f"Failed to open the file: {e}")


def create_metrics_dict(keys_with_texts):
    return {key: {"text": text} for key, text in keys_with_texts}


def main():
    global INCLUDE_PREVIOUS_DAILY
    global INCLUDE_PREVIOUS_BETA
    global INCLUDE_PREVIOUS_RELEASE
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-id",
        "--include-previous-daily",
        action="store_true",
        help="Include the previous Daily channel version in addition to the current version",
    )
    parser.add_argument(
        "-ib",
        "--include-previous-beta",
        action="store_true",
        help="Include the previous Beta channel version in addition to the current version",
    )
    parser.add_argument(
        "-ir",
        "--include-previous-release",
        action="store_true",
        help="Include the previous Release channel version in addition to the current version",
    )
    args = parser.parse_args()
    INCLUDE_PREVIOUS_DAILY = args.include_previous_daily
    INCLUDE_PREVIOUS_BETA = args.include_previous_beta
    INCLUDE_PREVIOUS_RELEASE = args.include_previous_release

    release_readiness_metrics = create_metrics_dict(
        [
            ("regression-all", "# of regressions (affecting 128+)"),
            ("regression-severe", "# of severe (S1/S2) regressions (affecting 128+)"),
            ("non-regression-all", "# of non-regressions (affecting 128+)"),
            (
                "non-regression-severe",
                "# of severe (S1/S2) non-regressions (affecting 128+)",
            ),
            ("topcrash", "# of topcrash bugs (affecting 128+)"),
            ("perf", "# of perf bugs (affecting 128+)"),
            ("sec-crit-high", "# of sec-crit, sec-high bugs (affecting 128+)"),
            ("sec-moderate-low", "# of sec-moderate, sec-low (affecting 128+)"),
            ("daily-adi", None),
            ("daily-crashes", "Daily crashes (last 24 hours)"),
            ("daily-crash-rate", None),
            ("beta-adi", None),
            ("beta-crashes", "Beta crashes (last 24 hours)"),
            ("beta-crash-rate", None),
            ("release-adi", None),
            ("release-crashes", "Release crashes (last 24 hours)"),
            ("release-crash-rate", None),
            ("total-adi", None),
            ("daily-adi-%", None),
            ("beta-adi-%", None),
            ("release-adi-%", None),
        ]
    )

    print_versions()

    for query_type in BMO_QUERY_TYPES:
        count = bmo_query(query_type)
        release_readiness_metrics[query_type]["count"] = count

    for query_type in STN_QUERY_TYPES:
        count = stn_query(query_type)
        release_readiness_metrics[query_type]["count"] = count

    for query_type in CSMO_QUERY_TYPES:
        count = csmo_query(query_type)
        release_readiness_metrics[query_type]["count"] = count

    for channel in ["daily", "beta", "release"]:
        release_readiness_metrics[f"{channel}-crash-rate"]["count"] = (
            release_readiness_metrics[f"{channel}-crashes"]["count"]
            / release_readiness_metrics[f"{channel}-adi"]["count"]
        )
        release_readiness_metrics[f"{channel}-adi-%"]["count"] = (
            release_readiness_metrics[f"{channel}-adi"]["count"]
            / release_readiness_metrics["total-adi"]["count"]
        )

    for query_type in BMO_QUERY_TYPES:
        release_readiness_metrics[query_type]["url"] = bmo_url(
            query_type, rest_url=False
        )

    for query_type in CSMO_QUERY_TYPES:
        release_readiness_metrics[query_type]["url"] = csmo_url(
            query_type, rest_url=False
        )

    export_metrics_to_spreadsheet(release_readiness_metrics)


if __name__ == "__main__":
    main()
